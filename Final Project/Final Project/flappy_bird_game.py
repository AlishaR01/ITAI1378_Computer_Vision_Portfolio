{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4cc541c5",
   "metadata": {},
   "source": [
    "# Flappy Bird AI Capstone Project - Coding Path (Advanced Skeleton)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ae5b3fb",
   "metadata": {},
   "source": [
    "Welcome to the advanced skeleton notebook for the Flappy Bird AI Capstone Project. This notebook is designed to guide you through key components of the coding path. Follow the hints and placeholders provided to complete the implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2918be68",
   "metadata": {},
   "source": [
    "## Pre-trained Model Integration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0330fc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1: Load the Pre-trained MobileNetV2 Model\n",
    "from tensorflow.keras.applications import MobileNetV2\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import GlobalAveragePooling2D, Dense\n",
    "\n",
    "# Load the base MobileNetV2 model without the top layers\n",
    "base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
    "\n",
    "# Freeze the base model layers to prevent them from being updated during training\n",
    "for layer in base_model.layers:\n",
    "    layer.trainable = False\n",
    "\n",
    "# Add custom layers for the Q-network\n",
    "x = GlobalAveragePooling2D()(base_model.output)\n",
    "x = Dense(128, activation='relu')(x)  # Custom dense layer\n",
    "output = Dense(2, activation='linear')(x)  # Output layer for actions (e.g., flap or no-flap)\n",
    "\n",
    "# Combine the base model and custom layers\n",
    "model = Model(inputs=base_model.input, outputs=output)\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='mse')\n",
    "print('Model successfully loaded and modified.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccdac090",
   "metadata": {},
   "source": [
    "## Reinforcement Learning Implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37e5f28a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 2: Implement the DQNAgent Class\n",
    "import numpy as np\n",
    "from collections import deque\n",
    "\n",
    "class DQNAgent:\n",
    "    def __init__(self, state_size, action_size):\n",
    "        self.state_size = state_size\n",
    "        self.action_size = action_size\n",
    "        self.memory = deque(maxlen=2000)  # Replay memory\n",
    "        self.gamma = 0.95  # Discount factor\n",
    "        self.epsilon = 1.0  # Exploration rate\n",
    "        self.epsilon_min = 0.01  # Minimum exploration rate\n",
    "        self.epsilon_decay = 0.995  # Exploration decay rate\n",
    "        self.model = self._build_model()\n",
    "    \n",
    "    def _build_model(self):\n",
    "        \"\"\"Build the Q-network using the pre-trained model.\"\"\"\n",
    "        # You can reuse the MobileNetV2 model from above here\n",
    "        # Hint: Copy the model structure from the previous cell\n",
    "        pass  # Replace with model implementation\n",
    "    \n",
    "    def remember(self, state, action, reward, next_state, done):\n",
    "        \"\"\"Store experiences in replay memory.\"\"\"\n",
    "        self.memory.append((state, action, reward, next_state, done))\n",
    "\n",
    "    def act(self, state):\n",
    "        \"\"\"Choose an action based on epsilon-greedy policy.\"\"\"\n",
    "        if np.random.rand() <= self.epsilon:\n",
    "            return np.random.choice(self.action_size)  # Explore\n",
    "        q_values = self.model.predict(state)\n",
    "        return np.argmax(q_values[0])  # Exploit\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31a0b1b0",
   "metadata": {},
   "source": [
    "## Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7cd1dae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 3: Training Loop\n",
    "from tqdm import tqdm\n",
    "\n",
    "# Initialize training parameters\n",
    "n_episodes = 500\n",
    "batch_size = 32\n",
    "\n",
    "for episode in tqdm(range(n_episodes)):\n",
    "    # Reset the environment and get the initial state\n",
    "    state = game.reset_game()\n",
    "    state = preprocess(state)  # Define the preprocess function separately\n",
    "    \n",
    "    done = False\n",
    "    while not done:\n",
    "        # Select an action\n",
    "        action = agent.act(state)\n",
    "        \n",
    "        # Perform the action and observe the next state and reward\n",
    "        next_state, reward, done, _ = game.step(action)\n",
    "        next_state = preprocess(next_state)\n",
    "        \n",
    "        # Store the experience in memory\n",
    "        agent.remember(state, action, reward, next_state, done)\n",
    "        \n",
    "        # Move to the next state\n",
    "        state = next_state\n",
    "        \n",
    "        # Train the model if enough samples are in memory\n",
    "        if len(agent.memory) > batch_size:\n",
    "            agent.replay(batch_size)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6b1d7a7",
   "metadata": {},
   "source": [
    "## Testing and Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e78123e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 4: Test the Trained Model\n",
    "agent.epsilon = 0  # Disable exploration\n",
    "\n",
    "for episode in range(10):\n",
    "    state = game.reset_game()\n",
    "    done = False\n",
    "    total_reward = 0\n",
    "    \n",
    "    while not done:\n",
    "        action = agent.act(state)\n",
    "        next_state, reward, done, _ = game.step(action)\n",
    "        total_reward += reward\n",
    "        state = next_state\n",
    "    \n",
    "    print(f'Episode {episode + 1}: Total Reward = {total_reward}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e090769-6f82-4b83-8a67-4baaab5c6ebc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.applications import MobileNetV2\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import GlobalAveragePooling2D, Dense\n",
    "\n",
    "base_model = MobileNetV2(weights=\"imagenet\", include_top=False, input_shape=(224, 224, 3))\n",
    "for layer in base_model.layers:\n",
    "    layer.trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3605ebc4-8fba-463d-8aee-abfb0219b4c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_model(self):\n",
    "    # Load the pre-trained MobileNetV2 model\n",
    "    base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
    "\n",
    "    # Freeze the base model layers\n",
    "    for layer in base_model.layers:\n",
    "        layer.trainable = False\n",
    "\n",
    "    # Add custom layers for the Q-network\n",
    "    x = GlobalAveragePooling2D()(base_model.output)\n",
    "    x = Dense(128, activation='relu')(x)\n",
    "    output = Dense(2, activation='linear')(x)\n",
    "\n",
    "    # Create the Q-network model\n",
    "    model = Model(inputs=base_model.input, outputs=output)\n",
    "\n",
    "    # Compile the model\n",
    "    model.compile(optimizer='adam', loss='mse')\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "232e0102-62a5-440c-ac2d-2ff55e8c50be",
   "metadata": {},
   "outputs": [],
   "source": [
    "def remember(self, state, action, reward, next_state, done):\n",
    "    # Store the experience in the replay memory\n",
    "    self.memory.append((state, action, reward, next_state, done))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f743258-e926-4dc0-b448-57d8f473f757",
   "metadata": {},
   "outputs": [],
   "source": [
    "def act(self, state):\n",
    "    # Choose an action using an epsilon-greedy policy\n",
    "    if np.random.rand() <= self.epsilon:\n",
    "        return np.random.choice(self.action_size)\n",
    "    else:\n",
    "        q_values = self.model.predict(state)\n",
    "        return np.argmax(q_values[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "107aa754-1608-4aa6-a398-ece1aaaec7df",
   "metadata": {},
   "outputs": [],
   "source": [
    "def replay(self, batch_size):\n",
    "    # Sample a batch of experiences from the replay memory\n",
    "    batch = random.sample(self.memory, batch_size)\n",
    "\n",
    "    # Update the Q-network using the batch of experiences\n",
    "    for state, action, reward, next_state, done in batch:\n",
    "        q_values = self.model.predict(state)\n",
    "        if done:\n",
    "            q_values[0][action] = reward\n",
    "        else:\n",
    "            q_values[0][action] = reward + self.gamma * np.max(self.model.predict(next_state)[0])\n",
    "        self.model.fit(state, q_values, epochs=1, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32b19fee-d1a1-400e-9c40-aa4341ecf856",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        pygame.init()\n",
    "        self.screen = pygame.display.set_mode((288, 512))\n",
    "        self.clock = pygame.time.Clock()\n",
    "        self.game_over = False\n",
    "\n",
    "    def get_state(self):\n",
    "        # Return the current state of the game\n",
    "        # This can be a tuple or a dictionary containing the game state\n",
    "        return (0, 0, 0, 0)\n",
    "\n",
    "    def step(self, action):\n",
    "        # Take the action in the game\n",
    "        # This can be a simple movement or a complex action\n",
    "        # Return the next state, reward, and done flag\n",
    "        return (0, 0, 0, 0), 0, False, {}\n",
    "\n",
    "    def reset_game(self):\n",
    "        # Reset the game to its initial state\n",
    "        self.game_over = False\n",
    "        return self.get_state()\n",
    "\n",
    "    def render(self):\n",
    "        # Render the game screen\n",
    "        self.screen.fill((255, 255, 255))\n",
    "        pygame.display.update()\n",
    "\n",
    "    def close(self):\n",
    "        # Close the game window\n",
    "        pygame.quit()\n",
    "        sys.exit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec0eb4be-ef54-4adb-97e8-7fe274bc8447",
   "metadata": {},
   "outputs": [],
   "source": [
    "game = FlappyBirdGame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3d0f405-aaf5-4bd3-ae7b-c619c7e683b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        pygame.init()\n",
    "        self.screen = pygame.display.set_mode((288, 512))\n",
    "        self.clock = pygame.time.Clock()\n",
    "        self.game_over = False\n",
    "\n",
    "    def get_state(self):\n",
    "        # Return the current state of the game\n",
    "        # This can be a tuple or a dictionary containing the game state\n",
    "        return (0, 0, 0, 0)\n",
    "\n",
    "    def step(self, action):\n",
    "        # Take the action in the game\n",
    "        # This can be a simple movement or a complex action\n",
    "        # Return the next state, reward, and done flag\n",
    "        return (0, 0, 0, 0), 0, False, {}\n",
    "\n",
    "    def reset_game(self):\n",
    "        # Reset the game to its initial state\n",
    "        self.game_over = False\n",
    "        return self.get_state()\n",
    "\n",
    "    def render(self):\n",
    "        # Render the game screen\n",
    "        self.screen.fill((255, 255, 255))\n",
    "        pygame.display.update()\n",
    "\n",
    "    def close(self):\n",
    "        # Close the game window\n",
    "        pygame.quit()\n",
    "        sys.exit()\n",
    "\n",
    "# Define the game object\n",
    "game = FlappyBirdGame()\n",
    "\n",
    "# Use the game object\n",
    "game.reset_game()\n",
    "game.render()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57878d84-e6f1-448d-adf6-5442b64178ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def update(self):\n",
    "        # Update the bird's position and velocity\n",
    "        self.bird.update()\n",
    "\n",
    "        # Update the pipes' positions\n",
    "        self.pipes.update()\n",
    "\n",
    "        # Check if the bird has passed through a pipe\n",
    "        self.check_pipe_collision()\n",
    "\n",
    "        # Check if the bird has collided with the ground or the ceiling\n",
    "        self.check_ground_collision()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3b4702c-de8a-4b2f-bd01-29a0f24e706e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "    def reset(self):\n",
    "        self.x = 300"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c5494f0-68ef-40c2-b477-f03e6dec6c13",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def check_pipe_collision(self):\n",
    "        if self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "\n",
    "    def check_ground_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bfb7f81-8495-4459-8621-07e52d339274",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def update(self):\n",
    "        # Update the bird's position and velocity\n",
    "        self.bird.update()\n",
    "\n",
    "        # Update the pipes' positions\n",
    "        self.pipes.update()\n",
    "\n",
    "        # Check if the bird has passed through a pipe\n",
    "        self.check_pipe_collision()\n",
    "\n",
    "        # Check if the bird has collided with the ground or the ceiling\n",
    "        self.check_ground_collision()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b035c665-81f0-44ba-8c44-2907d20755da",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "    def reset(self):\n",
    "        self.x = 300"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aafca18b-4f32-4db5-bb47-1396e30c8035",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def check_pipe_collision(self):\n",
    "        if self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "\n",
    "    def check_ground_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d232cf7-a2d4-48a9-a48f-f45b42db4c86",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def render(self):\n",
    "        # Clear the screen\n",
    "        screen.fill((255, 255, 255))\n",
    "\n",
    "        # Draw the bird\n",
    "        pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "\n",
    "        # Draw the pipes\n",
    "        pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "\n",
    "        # Draw the background\n",
    "        pygame.draw.rect(screen, (135, 206, 235), (0, 0, 400, 600))\n",
    "\n",
    "        # Update the display\n",
    "        pygame.display.flip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "086ad474-3d18-4351-a87e-ac42b30e0a72",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def update(self):\n",
    "        self.bird.update()\n",
    "        self.pipes.update()\n",
    "        self.check_collision()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02bbeed7-706b-4ee0-97f4-109bde345720",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c893dd78-0d2c-48fb-8d2f-e1636bf42e62",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "\n",
    "    def update(self):\n",
    "        self.bird.update()\n",
    "        self.pipes.update()\n",
    "        self.check_collision()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "\n",
    "    def render(self, screen):\n",
    "        screen.fill((255, 255, 255))\n",
    "        pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "        pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "        pygame.display.flip()\n",
    "\n",
    "def main():\n",
    "    pygame.init()\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    game = FlappyBirdGame()\n",
    "\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            elif event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_SPACE:\n",
    "                    game.bird.jump()\n",
    "\n",
    "        game.update()\n",
    "        game.render(screen)\n",
    "\n",
    "        clock.tick(60)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18715b56-1a0c-4788-9c5e-c2874d33ea8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    pygame.init()\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    game = FlappyBirdGame()\n",
    "\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            elif event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_SPACE:\n",
    "                    game.bird.jump()\n",
    "\n",
    "        game.update()\n",
    "        game.render()\n",
    "\n",
    "        clock.tick(60)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f965798e-72e3-464e-9381-5cc467838221",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def __init__(self):\n",
    "        # ...\n",
    "        self.score = 0\n",
    "\n",
    "    def update(self):\n",
    "        # ...\n",
    "        if self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.score += 1\n",
    "\n",
    "    def render(self):\n",
    "        # ...\n",
    "        font = pygame.font.Font(None, 36)\n",
    "        text = font.render(str(self.score), True, (0, 0, 0))\n",
    "        screen.blit(text, (10, 10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2420c2b5-aefc-4ac6-883c-48148ccd6123",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FlappyBirdGame:\n",
    "    # ...\n",
    "\n",
    "    def __init__(self):\n",
    "        # ...\n",
    "        self.game_over = False\n",
    "\n",
    "    def update(self):\n",
    "        # ...\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "\n",
    "    def render(self):\n",
    "        # ...\n",
    "        if self.game_over:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 200))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7692fbc-e295-4587-a85c-a8bfc1cf7bdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.bird.update()\n",
    "        self.pipes.update()\n",
    "        self.check_collision()\n",
    "        self.check_score()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def render(self, screen):\n",
    "        screen.fill((255, 255, 255))\n",
    "        pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "        pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "        font = pygame.font.Font(None, 36)\n",
    "        text = font.render(str(self.score), True, (0, 0, 0))\n",
    "        screen.blit(text, (10, 10))\n",
    "        pygame.display.flip()\n",
    "\n",
    "def main():\n",
    "    pygame.init()\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    game = FlappyBirdGame()\n",
    "\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            elif event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_SPACE:\n",
    "                    game.bird.jump()\n",
    "\n",
    "        game.update()\n",
    "        game.render(screen)\n",
    "\n",
    "        clock.tick(60)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7951427f-32ef-488f-8f64-99ddfddfbff6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "\n",
    "    def update(self):\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def render(self, screen):\n",
    "        screen.fill((255, 255, 255))\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 200))\n",
    "            text = font.render(\"Score: \" + str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 250))\n",
    "        pygame.display.flip()\n",
    "\n",
    "def main():\n",
    "    pygame.init()\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    game = FlappyBirdGame()\n",
    "\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            elif event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_SPACE:\n",
    "                    if game.game_over:\n",
    "                        game = FlappyBirdGame()\n",
    "                    else:\n",
    "                        game.bird.jump()\n",
    "\n",
    "        game.update()\n",
    "        game.render(screen)\n",
    "\n",
    "        clock.tick(60)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d81f84dd-9599-4530-8cd6-e85c8023fd0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.jump_sound = pygame.mixer.Sound('jump.wav')\n",
    "        self.collision_sound = pygame.mixer.Sound('collision.wav')\n",
    "        self.game_over_sound = pygame.mixer.Sound('game_over.wav')\n",
    "\n",
    "    def update(self):\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            self.collision_sound.play()\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                self.collision_sound.play()\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def render(self, screen):\n",
    "        screen.fill((255, 255, 255))\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 200))\n",
    "            text = font.render(\"Score: \" + str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 250))\n",
    "            self.game_over_sound.play()\n",
    "        pygame.display.flip()\n",
    "\n",
    "def main():\n",
    "    pygame.init()\n",
    "    pygame.mixer.init()\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    game = FlappyBirdGame()\n",
    "\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            elif event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_SPACE:\n",
    "                    if game.game_over:\n",
    "                        game = FlappyBirdGame()\n",
    "                    else:\n",
    "                        game.bird.jump()\n",
    "                        game.jump_sound.play()\n",
    "\n",
    "        game.update()\n",
    "        game.render(screen)\n",
    "\n",
    "        clock.tick(60)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1821000-a4c9-4628-85ce-d3765a3c96ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.jump_sound = pygame.mixer.Sound('jump.wav')\n",
    "        self.collision_sound = pygame.mixer.Sound('collision.wav')\n",
    "        self.game_over_sound = pygame.mixer.Sound('game_over.wav')\n",
    "        self.model = tf.keras.models.Sequential([\n",
    "            tf.keras.layers.Dense(64, activation='relu', input_shape=(4,)),\n",
    "            tf.keras.layers.Dense(64, activation='relu'),\n",
    "            tf.keras.layers.Dense(2, activation='softmax')\n",
    "        ])\n",
    "        self.model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "    def update(self):\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            self.collision_sound.play()\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                self.collision_sound.play()\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def ai_control(self):\n",
    "        state = np.array([self.bird.y, self.bird.velocity, self.pipes.x, self.pipes.y])\n",
    "        action = self.model.predict(state.reshape(1, 4))\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "            self.jump_sound.play()\n",
    "\n",
    "    def render(self, screen):\n",
    "        screen.fill((255, 255, 255))\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 200))\n",
    "            text = font.render(\"Score: \" + str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 250))\n",
    "            self.game_over_sound.play()\n",
    "        pygame.display.flip()\n",
    "\n",
    "def main():\n",
    "    pygame.init()\n",
    "    pygame.mixer.init()\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    game = FlappyBirdGame()\n",
    "\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            elif event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_SPACE:\n",
    "                    if game.game_over:\n",
    "                        game = FlappyBirdGame()\n",
    "                    else:\n",
    "                        game.bird.jump()\n",
    "                        game.jump_sound.play()\n",
    "\n",
    "        game.update()\n",
    "        game.render(screen)\n",
    "\n",
    "        clock.tick(60)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eba51dea-ca30-4f23-9cd6-b697dfd575f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.jump_sound = pygame.mixer.Sound('jump.wav')\n",
    "        self.collision_sound = pygame.mixer.Sound('collision.wav')\n",
    "        self.game_over_sound = pygame.mixer.Sound('game_over.wav')\n",
    "        self.model = tf.keras.models.Sequential([\n",
    "            tf.keras.layers.Dense(64, activation='relu', input_shape=(4,)),\n",
    "            tf.keras.layers.Dense(64, activation='relu'),\n",
    "            tf.keras.layers.Dense(2, activation='softmax')\n",
    "        ])\n",
    "        self.model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        self.memory = []\n",
    "\n",
    "    def update(self):\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            self.collision_sound.play()\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                self.collision_sound.play()\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def ai_control(self):\n",
    "        state = np.array([self.bird.y, self.bird.velocity, self.pipes.x, self.pipes.y])\n",
    "        action = self.model.predict(state.reshape(1, 4))\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "            self.jump_sound.play()\n",
    "\n",
    "    def render(self, screen):\n",
    "        screen.fill((255, 255, 255))\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 200))\n",
    "            text = font.render(\"Score: \" + str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 250))\n",
    "            self.game_over_sound.play()\n",
    "        pygame.display.flip()\n",
    "\n",
    "    def train(self):\n",
    "        for episode in range(1000):\n",
    "            self.game_over = False\n",
    "            self.score = 0\n",
    "            self.bird.y = 100\n",
    "            self.pipes.x = 300\n",
    "            while not self.game_over:\n",
    "                self.update()\n",
    "                self.render(pygame.display.set_mode((400, 600)))\n",
    "                pygame.time.Clock().tick(60)\n",
    "            self.memory.append((self.score, self.model.get_weights()))\n",
    "        self.memory.sort(key=lambda x: x[0], reverse=True)\n",
    "        self.model.set_weights(self.memory[0][1])\n",
    "\n",
    "def main():\n",
    "    pygame.init()\n",
    "    pygame.mixer.init()\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    game = FlappyBird"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8af556c5-35d7-4251-a5a0-453160e0195c",
   "metadata": {},
   "outputs": [],
   "source": [
    "    game = FlappyBirdGame()\n",
    "    game.train()\n",
    "\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            elif event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_SPACE:\n",
    "                    if game.game_over:\n",
    "                        game = FlappyBirdGame()\n",
    "                    else:\n",
    "                        game.bird.jump()\n",
    "                        game.jump_sound.play()\n",
    "\n",
    "        game.update()\n",
    "        game.render(screen)\n",
    "\n",
    "        clock.tick(60)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14275692-528f-47fc-b2c1-003c780ad4be",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.jump_sound = pygame.mixer.Sound('jump.wav')\n",
    "        self.collision_sound = pygame.mixer.Sound('collision.wav')\n",
    "        self.game_over_sound = pygame.mixer.Sound('game_over.wav')\n",
    "        self.model = self.create_model()\n",
    "\n",
    "    def create_model(self):\n",
    "        model = Sequential()\n",
    "        model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(400, 600, 3)))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(128, activation='relu'))\n",
    "        model.add(Dropout(0.2))\n",
    "        model.add(Dense(2, activation='softmax'))\n",
    "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    def update(self):\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            self.collision_sound.play()\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                self.collision_sound.play()\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def ai_control(self):\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "            self.jump_sound.play()\n",
    "\n",
    "    def render(self, screen):\n",
    "        screen.fill((255, 255, 255))\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 200))\n",
    "            text = font.render(\"Score: \" + str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 250))\n",
    "            self.game_over_sound.play()\n",
    "        pygame.display.flip()\n",
    "\n",
    "    def train(self):\n",
    "        for episode in range(1000):\n",
    "            self.game_over = False\n",
    "            self.score = 0\n",
    "            self.bird.y = 100\n",
    "            self.p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3428f72b-fc2e-4e22-8679-44b1c111b2e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.jump_sound = pygame.mixer.Sound('jump.wav')\n",
    "        self.collision_sound = pygame.mixer.Sound('collision.wav')\n",
    "        self.game_over_sound = pygame.mixer.Sound('game_over.wav')\n",
    "        self.model = self.create_model()\n",
    "\n",
    "    def create_model(self):\n",
    "        model = Sequential()\n",
    "        model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(400, 600, 3)))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(128, activation='relu'))\n",
    "        model.add(Dropout(0.2))\n",
    "        model.add(Dense(2, activation='softmax'))\n",
    "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    def update(self):\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            self.collision_sound.play()\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                self.collision_sound.play()\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def ai_control(self):\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "            self.jump_sound.play()\n",
    "\n",
    "    def render(self, screen):\n",
    "        screen.fill((255, 255, 255))\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, (0, 0, 0), (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 200))\n",
    "            text = font.render(\"Score: \" + str(self.score), True, (0, 0, 0))\n",
    "            screen.blit(text, (100, 250))\n",
    "            self.game_over_sound.play()\n",
    "        pygame.display.flip()\n",
    "\n",
    "    def train(self):\n",
    "        for episode in range(1000):\n",
    "            self.game_over = False\n",
    "            self.score ="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4b56e35-ad18-4b78-af9f-c9e7b54d79e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n",
    "\n",
    "# Initialize Pygame\n",
    "pygame.init()\n",
    "\n",
    "# Set up some constants\n",
    "WIDTH, HEIGHT = 400, 600\n",
    "WHITE = (255, 255, 255)\n",
    "BLACK = (0, 0, 0)\n",
    "\n",
    "# Set up the display\n",
    "screen = pygame.display.set_mode((WIDTH, HEIGHT))\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.model = self.create_model()\n",
    "\n",
    "    def create_model(self):\n",
    "        model = Sequential()\n",
    "        model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(400, 600, 3)))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(128, activation='relu'))\n",
    "        model.add(Dropout(0.2))\n",
    "        model.add(Dense(2, activation='softmax'))\n",
    "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    def update(self):\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def ai_control(self):\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "\n",
    "    def render(self):\n",
    "        screen.fill(WHITE)\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, BLACK, (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, BLACK, (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, BLACK)\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, BLACK)\n",
    "            screen.blit(text, (100, 200))\n",
    "            text = font.render(\"Score: \" + str(self.score), True, BLACK)\n",
    "            screen.blit(text, (100, 250))\n",
    "        pygame.display.flip()\n",
    "\n",
    "def main():\n",
    "    clock = pygame.time.Clock()\n",
    "    game = FlappyBirdGame()\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "        game.update()\n",
    "        game.render()\n",
    "        clock.tick(60)\n",
    "\n",
    "if __name__ == \"__main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a11e837a-5f59-4a2f-97a2-e0ec8e0e89dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n",
    "\n",
    "# Initialize Pygame\n",
    "pygame.init()\n",
    "\n",
    "# Set up some constants\n",
    "WIDTH, HEIGHT = 400, 600\n",
    "WHITE = (255, 255, 255)\n",
    "BLACK = (0, 0, 0)\n",
    "\n",
    "# Set up the display\n",
    "screen = pygame.display.set_mode((WIDTH, HEIGHT))\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.model = self.create_model()\n",
    "\n",
    "    def create_model(self):\n",
    "        model = Sequential()\n",
    "        model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(400, 600, 3)))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(128, activation='relu'))\n",
    "        model.add(Dropout(0.2))\n",
    "        model.add(Dense(2, activation='softmax'))\n",
    "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    def update(self):\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "\n",
    "    def check_score(self):\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "\n",
    "    def ai_control(self):\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "\n",
    "    def render(self):\n",
    "        screen.fill(WHITE)\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, BLACK, (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, BLACK, (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, BLACK)\n",
    "            screen.blit(text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "898289b9-af6e-4546-a48b-48370cdedb9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n",
    "\n",
    "# Initialize Pygame\n",
    "pygame.init()\n",
    "\n",
    "# Set up some constants\n",
    "WIDTH, HEIGHT = 400, 600\n",
    "WHITE = (255, 255, 255)\n",
    "BLACK = (0, 0, 0)\n",
    "\n",
    "# Set up the display\n",
    "screen = pygame.display.set_mode((WIDTH, HEIGHT))\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating bird position...\")\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        print(\"Bird is jumping...\")\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating pipe position...\")\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.model = self.create_model()\n",
    "\n",
    "    def create_model(self):\n",
    "        print(\"Creating model...\")\n",
    "        model = Sequential()\n",
    "        model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(400, 600, 3)))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(128, activation='relu'))\n",
    "        model.add(Dropout(0.2))\n",
    "        model.add(Dense(2, activation='softmax'))\n",
    "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating game state...\")\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        print(\"Checking for collision...\")\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            print(\"Game over! Bird hit the ground or ceiling.\")\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                print(\"Game over! Bird hit the pipe.\")\n",
    "\n",
    "    def check_score(self):\n",
    "        print(\"Checking score...\")\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "            print(\"Score increased! Current score:\", self.score)\n",
    "\n",
    "    def ai_control(self):\n",
    "        print(\"Using AI to control bird...\")\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "\n",
    "    def render(self):\n",
    "        print(\"Rendering game...\")\n",
    "        screen.fill(WHITE)\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, BLACK, (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, BLACK, (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, BLACK)\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, BLACK)\n",
    "            screen.blit(text, (100, 200))\n",
    "            text = font.render(\"Score: \" + str(self.score), True, BLACK)\n",
    "            screen.blit(text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "399ae4e5-fc46-45fc-bbbb-180025a2aee1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n",
    "\n",
    "# Initialize Pygame\n",
    "pygame.init()\n",
    "\n",
    "# Set up some constants\n",
    "WIDTH, HEIGHT = 400, 600\n",
    "WHITE = (255, 255, 255)\n",
    "BLACK = (0, 0, 0)\n",
    "\n",
    "# Set up the display\n",
    "screen = pygame.display.set_mode((WIDTH, HEIGHT))\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating bird position...\")\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        print(\"Bird is jumping...\")\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating pipe position...\")\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.model = self.create_model()\n",
    "\n",
    "    def create_model(self):\n",
    "        print(\"Creating model...\")\n",
    "        model = Sequential()\n",
    "        model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(400, 600, 3)))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(128, activation='relu'))\n",
    "        model.add(Dropout(0.2))\n",
    "        model.add(Dense(2, activation='softmax'))\n",
    "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating game state...\")\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        print(\"Checking for collision...\")\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            print(\"Game over! Bird hit the ground or ceiling.\")\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                print(\"Game over! Bird hit the pipe.\")\n",
    "\n",
    "    def check_score(self):\n",
    "        print(\"Checking score...\")\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "            print(\"Score increased! Current score:\", self.score)\n",
    "\n",
    "    def ai_control(self):\n",
    "        print(\"Using AI to control bird...\")\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "\n",
    "    def render(self):\n",
    "        print(\"Rendering game...\")\n",
    "        screen.fill(WHITE)\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, BLACK, (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, BLACK, (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, BLACK)\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, BLACK)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "70e6a826-1a3b-46c9-b6a7-473663f6454f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 2.6.1 (SDL 2.28.4, Python 3.12.4)\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n"
     ]
    }
   ],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n",
    "\n",
    "# Initialize Pygame\n",
    "pygame.init()\n",
    "\n",
    "# Set up some constants\n",
    "WIDTH, HEIGHT = 400, 600\n",
    "WHITE = (255, 255, 255)\n",
    "BLACK = (0, 0, 0)\n",
    "\n",
    "# Set up the display\n",
    "screen = pygame.display.set_mode((WIDTH, HEIGHT))\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating bird position...\")\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        print(\"Bird is jumping...\")\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating pipe position...\")\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.model = self.create_model()\n",
    "\n",
    "    def create_model(self):\n",
    "        print(\"Creating model...\")\n",
    "        model = Sequential()\n",
    "        model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(400, 600, 3)))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(128, activation='relu'))\n",
    "        model.add(Dropout(0.2))\n",
    "        model.add(Dense(2, activation='softmax'))\n",
    "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating game state...\")\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        print(\"Checking for collision...\")\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            print(\"Game over! Bird hit the ground or ceiling.\")\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                print(\"Game over! Bird hit the pipe.\")\n",
    "\n",
    "    def check_score(self):\n",
    "        print(\"Checking score...\")\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "            print(\"Score increased! Current score:\", self.score)\n",
    "\n",
    "    def ai_control(self):\n",
    "        print(\"Using AI to control bird...\")\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "\n",
    "    def render(self):\n",
    "        print(\"Rendering game...\")\n",
    "        screen.fill(WHITE)\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, BLACK, (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, BLACK, (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, BLACK)\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, BLACK)\n",
    "            screen.blit(text, (100, 200))\n",
    "        pygame.display.flip()\n",
    "\n",
    "def main():\n",
    "    game = FlappyBird"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "88617e15-7d8b-4c33-9024-2ddc832ecd3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "import sys\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n",
    "\n",
    "# Initialize Pygame\n",
    "pygame.init()\n",
    "\n",
    "# Set up some constants\n",
    "WIDTH, HEIGHT = 400, 600\n",
    "WHITE = (255, 255, 255)\n",
    "BLACK = (0, 0, 0)\n",
    "\n",
    "# Set up the display\n",
    "screen = pygame.display.set_mode((WIDTH, HEIGHT))\n",
    "\n",
    "class Bird:\n",
    "    def __init__(self):\n",
    "        self.x = 100\n",
    "        self.y = 100\n",
    "        self.width = 20\n",
    "        self.height = 20\n",
    "        self.velocity = 0\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating bird position...\")\n",
    "        self.y += self.velocity\n",
    "        self.velocity += 0.5\n",
    "\n",
    "    def jump(self):\n",
    "        print(\"Bird is jumping...\")\n",
    "        self.velocity = -10\n",
    "\n",
    "class Pipes:\n",
    "    def __init__(self):\n",
    "        self.x = 300\n",
    "        self.y = 200\n",
    "        self.width = 20\n",
    "        self.height = 200\n",
    "        self.gap = 100\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating pipe position...\")\n",
    "        self.x -= 2\n",
    "\n",
    "class FlappyBirdGame:\n",
    "    def __init__(self):\n",
    "        self.bird = Bird()\n",
    "        self.pipes = Pipes()\n",
    "        self.game_over = False\n",
    "        self.score = 0\n",
    "        self.model = self.create_model()\n",
    "\n",
    "    def create_model(self):\n",
    "        print(\"Creating model...\")\n",
    "        model = Sequential()\n",
    "        model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(400, 600, 3)))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "        model.add(MaxPooling2D((2, 2)))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(128, activation='relu'))\n",
    "        model.add(Dropout(0.2))\n",
    "        model.add(Dense(2, activation='softmax'))\n",
    "        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    def update(self):\n",
    "        print(\"Updating game state...\")\n",
    "        if not self.game_over:\n",
    "            self.bird.update()\n",
    "            self.pipes.update()\n",
    "            self.check_collision()\n",
    "            self.check_score()\n",
    "            self.ai_control()\n",
    "\n",
    "    def check_collision(self):\n",
    "        print(\"Checking for collision...\")\n",
    "        if self.bird.y + self.bird.height > 400 or self.bird.y < 0:\n",
    "            self.game_over = True\n",
    "            print(\"Game over! Bird hit the ground or ceiling.\")\n",
    "        elif self.bird.x + self.bird.width > self.pipes.x and self.bird.x < self.pipes.x + self.pipes.width:\n",
    "            if self.bird.y < self.pipes.y or self.bird.y + self.bird.height > self.pipes.y + self.pipes.gap:\n",
    "                self.game_over = True\n",
    "                print(\"Game over! Bird hit the pipe.\")\n",
    "\n",
    "    def check_score(self):\n",
    "        print(\"Checking score...\")\n",
    "        if self.pipes.x + self.pipes.width < self.bird.x and self.pipes.x + self.pipes.width > self.bird.x - 2:\n",
    "            self.score += 1\n",
    "            print(\"Score increased! Current score:\", self.score)\n",
    "\n",
    "    def ai_control(self):\n",
    "        print(\"Using AI to control bird...\")\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n",
    "\n",
    "    def render(self):\n",
    "        print(\"Rendering game...\")\n",
    "        screen.fill(WHITE)\n",
    "        if not self.game_over:\n",
    "            pygame.draw.rect(screen, BLACK, (self.bird.x, self.bird.y, self.bird.width, self.bird.height))\n",
    "            pygame.draw.rect(screen, BLACK, (self.pipes.x, self.pipes.y, self.pipes.width, self.pipes.height))\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(str(self.score), True, BLACK)\n",
    "            screen.blit(text, (10, 10))\n",
    "        else:\n",
    "            font = pygame.font.Font(None, 36)\n",
    "            text = font.render(\"Game Over!\", True, BLACK)\n",
    "            screen.blit(text, (100, 200))\n",
    "        pygame.display.flip()\n",
    "\n",
    "def main():\n",
    "    game = FlappyBirdGame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cb6c25b1-137a-4694-a598-c4d274db009e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    game = FlappyBirdGame()\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    while not game.game_over:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            if event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_SPACE:\n",
    "                    game.bird.jump()\n",
    "\n",
    "        game.update()\n",
    "        game.render()\n",
    "        clock.tick(30)  # Limit to 30 frames per second\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d0c52883-1f79-4bb0-ba66-c7fe951e93bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Hp\\anaconda3\\Lib\\site-packages\\keras\\src\\layers\\convolutional\\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 801ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 362ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 370ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 288ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 239ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 266ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 239ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 266ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 281ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 260ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 244ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 360ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 237ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 257ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 274ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 284ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 289ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 285ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 282ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 239ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 523ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 238ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 261ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 221ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 221ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 226ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 257ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 254ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 257ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 278ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 342ms/step\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Game over! Bird hit the ground or ceiling.\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 236ms/step\n",
      "Rendering game...\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2b612c06-cce3-496a-a70e-eca37022e968",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ai_control(self, frame_count):\n",
    "    # Reduce the frequency of AI predictions\n",
    "    if frame_count % 5 == 0:  # Every 5 frames\n",
    "        print(\"Using AI to control bird...\")\n",
    "        state = pygame.surfarray.array3d(pygame.display.get_surface())\n",
    "        state = state.reshape((1, 400, 600, 3))\n",
    "        action = self.model.predict(state)\n",
    "        if action[0][0] > action[0][1]:\n",
    "            self.bird.jump()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "829d4cb7-11e2-45c5-8b11-da22ddc7ec7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def update(self, frame_count):\n",
    "    print(\"Updating game state...\")\n",
    "    if not self.game_over:\n",
    "        self.bird.update()\n",
    "        self.pipes.update()\n",
    "        self.check_collision()\n",
    "        self.check_score()\n",
    "        self.ai_control(frame_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "90557239-7cee-4eda-8901-7f470f8d7d16",
   "metadata": {},
   "outputs": [],
   "source": [
    "def update(self, frame_count):\n",
    "    print(\"Updating game state... Frame:\", frame_count)\n",
    "    if not self.game_over:\n",
    "        self.bird.update()\n",
    "        self.pipes.update()\n",
    "        self.check_collision()\n",
    "        self.check_score()\n",
    "        self.ai_control()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e5712fed-cea0-4d9d-a6a1-e108ae8414b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating model...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 522ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 311ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 318ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 252ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 259ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 238ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 294ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 233ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 234ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 234ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Updating game state...\n",
      "Updating bird position...\n",
      "Updating pipe position...\n",
      "Checking for collision...\n",
      "Game over! Bird hit the ground or ceiling.\n",
      "Checking score...\n",
      "Using AI to control bird...\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 267ms/step\n",
      "Bird is jumping...\n",
      "Rendering game...\n",
      "Final Score: 0\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    pygame.init()  # Initialize Pygame\n",
    "    game = FlappyBirdGame()  # Create an instance of the game\n",
    "\n",
    "    # Game loop\n",
    "    clock = pygame.time.Clock()\n",
    "    while not game.game_over:\n",
    "        # Handle events\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                sys.exit()\n",
    "            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:\n",
    "                game.bird.jump()\n",
    "\n",
    "        # Update and render the game\n",
    "        game.update()  # Removed frame_count argument\n",
    "        game.render()\n",
    "\n",
    "        clock.tick(30)  # Limit the frame rate to 30 FPS\n",
    "\n",
    "    print(\"Final Score:\", game.score)\n",
    "    pygame.quit()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
